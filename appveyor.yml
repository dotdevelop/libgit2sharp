version: '{build}'

branches:
  only:
  - master
  - vNext

skip_tags: true

clone_folder: C:\projects\libgit2sharp

environment:
  coverity_token:
    secure: nuzUT+HecXGIi3KaPd/1hgFEZJan/j6+oNbPV75JKjk=
  coverity_email:
    secure: eGVilNg1Yuq+Xj+SW8r3WCtjnzhoDV0sNJkma4NRq7A=
  version : 0.22.0
  matrix:
  - xunit_runner: xunit.console.clr4.exe
    Arch: 64
  - xunit_runner: xunit.console.clr4.x86.exe
    Arch: 32

matrix:
  fast_finish: true

install:
- ps: |
    Write-Host "Commit being built = $($Env:APPVEYOR_REPO_COMMIT)"
    Write-Host "Current build version = $($Env:VERSION)"
    Write-Host "Target branch = $($Env:APPVEYOR_REPO_BRANCH)"
    Write-Host "Is a Pull Request = $($Env:APPVEYOR_PULL_REQUEST_NUMBER -ne $null)"
    $BuildDate = (Get-Date).ToUniversalTime().ToString("yyyyMMddHHmmss")
    Write-Host "Build UTC date = $BuildDate"
    $VersionSuffix = ""
    If ($Env:APPVEYOR_REPO_BRANCH -ne "master")
    {
      $VersionSuffix = "-pre$BuildDate"
    }
    $Version = "$($Env:VERSION)$($VersionSuffix)"
    $Env:ASSEMBLY_INFORMATIONAL_VERSION = $Version
    Write-Host "Assembly informational version = $($Env:ASSEMBLY_INFORMATIONAL_VERSION)"
    $ShouldPublishNugetArtifact = "$($env:APPVEYOR_PULL_REQUEST_NUMBER -eq $null)"
    $Env:SHOULD_PUBLISH_NUGET_ARTIFACT = $ShouldPublishNugetArtifact
    Write-Host "Should publish Nuget artifact = $($Env:SHOULD_PUBLISH_NUGET_ARTIFACT)"
    cinst sourcelink -y

assembly_info:
  patch: true
  file: LibGit2Sharp\Properties\AssemblyInfo.cs
  assembly_version: '$(VERSION)'
  assembly_file_version: '$(VERSION)'
  assembly_informational_version: '$(ASSEMBLY_INFORMATIONAL_VERSION)'

cache:
  - packages

before_build:
- nuget restore "%APPVEYOR_BUILD_FOLDER%\LibGit2Sharp.sln"

build_script:
- cov-build.exe --dir cov-int msbuild "%APPVEYOR_BUILD_FOLDER%\LibGit2Sharp.sln" /verbosity:normal /p:Configuration=Release /logger:"C:\Program Files\AppVeyor\BuildAgent\Appveyor.MSBuildLogger.dll" /property:ExtraDefine="LEAKS_IDENTIFYING"

test_script:
- REM '%xunit_runner%  "%APPVEYOR_BUILD_FOLDER%\LibGit2Sharp.Tests\bin\Release\LibGit2Sharp.Tests.dll" /appveyor'
- IF %ERRORLEVEL% NEQ 0 EXIT /B %ERRORLEVEL%

on_success:
- ps: |
    # & "$env:APPVEYOR_BUILD_FOLDER\nuget.package\BuildNugetPackage.ps1" -commitSha "$env:APPVEYOR_REPO_COMMIT" -postBuild  { sourcelink index -pr LibGit2Sharp.csproj -pp Configuration Release -nf Core\NativeDllName.cs -nf Core\UniqueIdentifier.cs -nf Properties\AssemblyInfo.cs -r .. -u 'https://raw.githubusercontent.com/libgit2/libgit2sharp/{0}/%var2%' }
    # Add-Type -Path "$env:APPVEYOR_BUILD_FOLDER\LibGit2Sharp\bin\Release\LibGit2Sharp.dll"
    # Write-Host "LibGit2Sharp version = $([LibGit2Sharp.GlobalSettings]::Version)" -ForegroundColor "Magenta"
    # If ($Env:SHOULD_PUBLISH_NUGET_ARTIFACT -eq $True)
    # {
    #   Get-ChildItem "$env:APPVEYOR_BUILD_FOLDER\LibGit2sharp\*.nupkg" | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }
    # }
    If ($Env:SHOULD_PUBLISH_NUGET_ARTIFACT -eq $False)
    {
      Remove-Item -Recurse -Force (Join-Path $env:APPVEYOR_BUILD_FOLDER "LibGit2sharp/bin")
      Remove-Item -Recurse -Force (Join-Path $env:APPVEYOR_BUILD_FOLDER "LibGit2sharp/obj")
      Remove-Item -Recurse -Force (Join-Path $env:APPVEYOR_BUILD_FOLDER "LibGit2sharp.Tests/bin")
      Remove-Item -Recurse -Force (Join-Path $env:APPVEYOR_BUILD_FOLDER "LibGit2sharp.Tests/obj")

      & nuget install PublishCoverity -Version 0.9.0 -ExcludeVersion -OutputDirectory .\packages

      # Write-Host -ForegroundColor "Green" "Building project with Coverity..."
      # & cov-build.exe --dir cov-int "C:\Program Files (x86)\MSBuild\12.0\bin\msbuild.exe" $env:APPVEYOR_BUILD_FOLDER\LibGit2Sharp.sln /p:Configuration=Release /logger:"C:\Program Files\AppVeyor\BuildAgent\Appveyor.MSBuildLogger.dll"
      Write-Host -ForegroundColor "Green" "Compressing Coverity results..."

      & .\packages\PublishCoverity\PublishCoverity.exe compress `
        -i "$env:APPVEYOR_BUILD_FOLDER\cov-int" `
        -o "$env:APPVEYOR_BUILD_FOLDER\$env:APPVEYOR_PROJECT_NAME.zip" `
        --overwrite

      Write-Host -ForegroundColor "Green" "###"
      ls
      Write-Host -ForegroundColor "Green" "###"
      ls cov-int

      # Write-Host -ForegroundColor "Green" "Uploading Coverity results... $env:coverity_email"
      # & .\packages\PublishCoverity\PublishCoverity.exe publish `
      #   -t "$env:coverity_token" `
      #   -e "$env:coverity_email" `
      #   -r "$env:APPVEYOR_REPO_NAME" `
      #   -z "$env:APPVEYOR_BUILD_FOLDER\$env:APPVEYOR_PROJECT_NAME.zip" `
      #   -d "CI server scheduled build." `
      #   --codeVersion "$Env:ASSEMBLY_INFORMATIONAL_VERSION"
    }

artifacts:
- path: CHANGES.md
  name: changes.zip
  type: zip

- path: CHANGES.md
  name: changes

- path: libgit2sharp.zip
  name: coverity.analysis.results

- path: cov-int\build-log.txt
  name: coverity.build.log

notifications:
- provider: Email
  to:
    - emeric.fermas@gmail.com
  on_build_status_changed: true
