<Project>

  <PropertyGroup>
    <MSBuildAllProjects>$(MSBuildAllProjects);$(MSBuildThisFileFullPath)</MSBuildAllProjects>
  </PropertyGroup>

  <Target Name="DefineProperties">
    <PropertyGroup>
      <UniqueIdentifierPath>$(IntermediateOutputPath)UniqueIdentifier.g.cs</UniqueIdentifierPath>
      <AssemblyCommitIdsPath>$(IntermediateOutputPath)AssemblyCommitIds.g.cs</AssemblyCommitIdsPath>
    </PropertyGroup>
  </Target>


  <Target Name="GenerateUniqueIdentifierCs" Inputs="$(VersionSourceFile)" Outputs="$(UniqueIdentifierPath)" BeforeTargets="CoreCompile" AfterTargets="GenerateAssemblyVersionInfo" DependsOnTargets="DefineProperties">

    <PropertyGroup>
      <UniqueIdentifier>$([System.Guid]::NewGuid())</UniqueIdentifier>
      <UniqueIdentifier Condition="'$(GitCommitId)' != ''">$(GitCommitId)</UniqueIdentifier>
      <UniqueIdSourceLines>
        namespace LibGit2Sharp.Core
        {
        internal static class UniqueId
        {
        public const string UniqueIdentifier = "$(UniqueIdentifier)"%3b
        }
        }
      </UniqueIdSourceLines>
    </PropertyGroup>

    <WriteLinesToFile File="$(UniqueIdentifierPath)" Lines="$(UniqueIdSourceLines)" Overwrite="True" WriteOnlyWhenDifferent="true" />

    <ItemGroup>
      <Compile Include="$(UniqueIdentifierPath)" />
      <FileWrites Include="$(UniqueIdentifierPath)" />
    </ItemGroup>

  </Target>


  <Target Name="AddNativeDllCommitShaToBuildMetadata" Inputs="$(MSBuildThisFileDirectory)..\..\libgit-binary\libgit2_hash.txt" Outputs="$(IntermediateOutputPath)$(libgit2_filename).stamp" BeforeTargets="GetBuildVersion">

    <ReadLinesFromFile File="$(MSBuildThisFileDirectory)..\..\libgit-binary\libgit2_hash.txt"
                       Condition="Exists('$(MSBuildThisFileDirectory)..\..\libgit-binary\libgit2_hash.txt')">
        <Output TaskParameter="Lines" PropertyName="libgit2_hash" />
    </ReadLinesFromFile>

    <PropertyGroup Condition="Exists('$(MSBuildThisFileDirectory)..\..\libgit-binary\libgit2_hash.txt')">
      <libgit2_filename>libgit2-$(libgit2_hash.Substring(0,7))</libgit2_filename>
    </PropertyGroup>

    <ItemGroup>
      <BuildMetadata Include="libgit2-$(libgit2_hash.Substring(0,7))" />
    </ItemGroup>

    <WriteLinesToFile File="$(IntermediateOutputPath)$(libgit2_filename).stamp" Lines="@(BuildMetadata)" Overwrite="true" WriteOnlyWhenDifferent="True" />
  </Target>


  <Target Name="GenerateAssemblyCommitIdsCs" Inputs="$(libgit2_filename);$(VersionSourceFile)" Outputs="$(AssemblyCommitIdsPath)" BeforeTargets="CoreCompile" AfterTargets="GenerateAssemblyVersionInfo" DependsOnTargets="DefineProperties">

    <PropertyGroup>
      <LibGit2SharpCommitSha>unknown</LibGit2SharpCommitSha>
      <LibGit2SharpCommitSha Condition="'$(GitCommitId)' != ''">$(GitCommitId)</LibGit2SharpCommitSha>
      <AssemblyCommitIdsSourceLines>
        namespace LibGit2Sharp
        {
        internal static class AssemblyCommitIds
        {
        public const string LibGit2CommitSha = "$(libgit2_hash)"%3b
        public const string LibGit2SharpCommitSha = "$(LibGit2SharpCommitSha)"%3b
        }
        }
      </AssemblyCommitIdsSourceLines>
    </PropertyGroup>

    <WriteLinesToFile File="$(AssemblyCommitIdsPath)" Lines="$(AssemblyCommitIdsSourceLines)" Overwrite="true" WriteOnlyWhenDifferent="true" />

    <ItemGroup>
      <Compile Include="$(AssemblyCommitIdsPath)" />
      <FileWrites Include="$(AssemblyCommitIdsPath)" />
    </ItemGroup>

  </Target>

</Project>
